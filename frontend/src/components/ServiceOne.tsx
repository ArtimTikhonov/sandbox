import React, { useState, useEffect } from 'react';
import { serviceOneApi, handleApiError, HealthStatus } from '../services/api';
import './ServiceOne.css';

interface MetricTest {
    name: string;
    description: string;
    action: () => Promise<any>;
    loading: boolean;
    result?: string;
    error?: string;
}

const ServiceOne: React.FC = () => {
    const [health, setHealth] = useState<HealthStatus | null>(null);
    const [healthLoading, setHealthLoading] = useState<boolean>(false);
    const [metrics, setMetrics] = useState<MetricTest[]>([
        {
            name: '–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç',
            description: '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
            action: serviceOneApi.testMetrics,
            loading: false,
        },
        {
            name: '–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞',
            description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ API –≤—ã–∑–æ–≤–æ–≤',
            action: serviceOneApi.incrementCounter,
            loading: false,
        },
        {
            name: '–°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏',
            description: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–æ–∫',
            action: serviceOneApi.simulateError,
            loading: false,
        },
        {
            name: '–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è',
            description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 2-5 —Å–µ–∫—É–Ω–¥',
            action: serviceOneApi.longOperation,
            loading: false,
        },
        {
            name: '–°–∏–º—É–ª—è—Ü–∏—è –ë–î –∑–∞–ø—Ä–æ—Å–∞',
            description: '–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏',
            action: serviceOneApi.databaseSimulation,
            loading: false,
        },
    ]);

    const [gaugeValue, setGaugeValue] = useState<number>(50);

    const loadHealth = async () => {
        try {
            setHealthLoading(true);
            const response = await serviceOneApi.health();
            setHealth(response.data);
        } catch (error) {
            console.error('Health check failed:', error);
        } finally {
            setHealthLoading(false);
        }
    };

    const executeMetricTest = async (index: number) => {
        const updatedMetrics = [...metrics];
        updatedMetrics[index].loading = true;
        updatedMetrics[index].result = undefined;
        updatedMetrics[index].error = undefined;
        setMetrics(updatedMetrics);

        try {
            const response = await metrics[index].action();
            updatedMetrics[index].result = typeof response.data === 'string'
                ? response.data
                : JSON.stringify(response.data);
        } catch (error) {
            updatedMetrics[index].error = handleApiError(error);
        } finally {
            updatedMetrics[index].loading = false;
            setMetrics(updatedMetrics);
        }
    };

    const setGaugeMetric = async () => {
        try {
            const response = await serviceOneApi.setGauge(gaugeValue);
            console.log('Gauge updated:', response.data);
        } catch (error) {
            console.error('Failed to set gauge:', error);
        }
    };

    const executeAllTests = async () => {
        for (let i = 0; i < metrics.length; i++) {
            await executeMetricTest(i);
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        }
    };

    useEffect(() => {
        loadHealth();
    }, []);

    const getHealthStatusColor = (status: string) => {
        switch (status.toLowerCase()) {
            case 'up': return '#27ae60';
            case 'down': return '#e74c3c';
            default: return '#f39c12';
        }
    };

    return (
        <div className="service-one">
            <div className="service-header">
                <h1>üîß Service One</h1>
                <p>–û—Å–Ω–æ–≤–Ω–æ–π –±–∏–∑–Ω–µ—Å-—Å–µ—Ä–≤–∏—Å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏, –ë–î –∏ –∫–µ—à–µ–º</p>
            </div>

            <div className="service-content">
                {/* Health Status */}
                <div className="service-section">
                    <div className="section-card">
                        <div className="section-header">
                            <h2>üíö –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è</h2>
                            <button
                                onClick={loadHealth}
                                disabled={healthLoading}
                                className="btn-secondary"
                            >
                                {healthLoading ? '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
                            </button>
                        </div>

                        {health ? (
                            <div className="health-status">
                                <div className="health-overall">
                  <span
                      className="health-indicator"
                      style={{ backgroundColor: getHealthStatusColor(health.status) }}
                  ></span>
                                    <span className="health-text">
                    –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: <strong>{health.status.toUpperCase()}</strong>
                  </span>
                                </div>

                                <div className="health-components">
                                    <h4>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</h4>
                                    {Object.entries(health.components).map(([componentName, component]) => (
                                        <div key={componentName} className="health-component">
                      <span
                          className="component-indicator"
                          style={{ backgroundColor: getHealthStatusColor(component.status) }}
                      ></span>
                                            <span className="component-name">{componentName}</span>
                                            <span className="component-status">{component.status}</span>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        ) : (
                            <p className="no-health">–î–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
                        )}
                    </div>
                </div>

                {/* Metrics Testing */}
                <div className="service-section">
                    <div className="section-card">
                        <div className="section-header">
                            <h2>üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫</h2>
                            <button
                                onClick={executeAllTests}
                                disabled={metrics.some(m => m.loading)}
                                className="btn-primary"
                            >
                                üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
                            </button>
                        </div>

                        <div className="metrics-grid">
                            {metrics.map((metric, index) => (
                                <div key={index} className="metric-card">
                                    <div className="metric-header">
                                        <h3>{metric.name}</h3>
                                        <button
                                            onClick={() => executeMetricTest(index)}
                                            disabled={metric.loading}
                                            className="btn-secondary btn-small"
                                        >
                                            {metric.loading ? '‚è≥' : '‚ñ∂Ô∏è'}
                                        </button>
                                    </div>

                                    <p className="metric-description">{metric.description}</p>

                                    {metric.result && (
                                        <div className="metric-result success">
                                            <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong>
                                            <code>{metric.result}</code>
                                        </div>
                                    )}

                                    {metric.error && (
                                        <div className="metric-result error">
                                            <strong>–û—à–∏–±–∫–∞:</strong>
                                            <span>{metric.error}</span>
                                        </div>
                                    )}
                                </div>
                            ))}
                        </div>
                    </div>
                </div>

                {/* Gauge Control */}
                <div className="service-section">
                    <div className="section-card">
                        <h2>üéöÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Gauge –º–µ—Ç—Ä–∏–∫–æ–π</h2>
                        <div className="gauge-control">
                            <label>–ó–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:</label>
                            <div className="gauge-input">
                                <input
                                    type="range"
                                    min="0"
                                    max="100"
                                    value={gaugeValue}
                                    onChange={(e) => setGaugeValue(Number(e.target.value))}
                                    className="gauge-slider"
                                />
                                <span className="gauge-value">{gaugeValue}</span>
                                <button
                                    onClick={setGaugeMetric}
                                    className="btn-primary"
                                >
                                    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* API Information */}
                <div className="service-section">
                    <div className="section-card">
                        <h2>üîó API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã</h2>
                        <div className="api-endpoints">
                            <div className="endpoint-group">
                                <h4>–û—Å–Ω–æ–≤–Ω—ã–µ:</h4>
                                <div className="endpoint">
                                    <span className="method get">GET</span>
                                    <span className="path">/one/get</span>
                                    <span className="description">–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç</span>
                                </div>
                            </div>

                            <div className="endpoint-group">
                                <h4>–ú–µ—Ç—Ä–∏–∫–∏:</h4>
                                <div className="endpoint">
                                    <span className="method get">GET</span>
                                    <span className="path">/metrics/test</span>
                                    <span className="description">–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏</span>
                                </div>
                                <div className="endpoint">
                                    <span className="method post">POST</span>
                                    <span className="path">/metrics/increment-counter</span>
                                    <span className="description">–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞</span>
                                </div>
                                <div className="endpoint">
                                    <span className="method post">POST</span>
                                    <span className="path">/metrics/set-gauge/{`{value}`}</span>
                                    <span className="description">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å gauge –∑–Ω–∞—á–µ–Ω–∏–µ</span>
                                </div>
                            </div>

                            <div className="endpoint-group">
                                <h4>Redis:</h4>
                                <div className="endpoint">
                                    <span className="method post">POST</span>
                                    <span className="path">/redis/set/{`{key}`}</span>
                                    <span className="description">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ</span>
                                </div>
                                <div className="endpoint">
                                    <span className="method get">GET</span>
                                    <span className="path">/redis/get/{`{key}`}</span>
                                    <span className="description">–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ</span>
                                </div>
                                <div className="endpoint">
                                    <span className="method get">GET</span>
                                    <span className="path">/redis/keys</span>
                                    <span className="description">–í—Å–µ –∫–ª—é—á–∏</span>
                                </div>
                            </div>

                            <div className="endpoint-group">
                                <h4>Kafka:</h4>
                                <div className="endpoint">
                                    <span className="method post">POST</span>
                                    <span className="path">/api/messages</span>
                                    <span className="description">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</span>
                                </div>
                            </div>

                            <div className="endpoint-group">
                                <h4>Actuator:</h4>
                                <div className="endpoint">
                                    <span className="method get">GET</span>
                                    <span className="path">/actuator/health</span>
                                    <span className="description">–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è</span>
                                </div>
                                <div className="endpoint">
                                    <span className="method get">GET</span>
                                    <span className="path">/actuator/prometheus</span>
                                    <span className="description">–ú–µ—Ç—Ä–∏–∫–∏ Prometheus</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Quick Links */}
                <div className="service-section">
                    <div className="section-card">
                        <h2>üîó –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏</h2>
                        <div className="quick-links">
                            <a
                                href="http://localhost:8080/actuator"
                                target="_blank"
                                rel="noopener noreferrer"
                                className="external-link"
                            >
                                ‚öôÔ∏è Spring Boot Actuator
                            </a>
                            <a
                                href="http://localhost:8080/actuator/health"
                                target="_blank"
                                rel="noopener noreferrer"
                                className="external-link"
                            >
                                üíö Health Check
                            </a>
                            <a
                                href="http://localhost:8080/actuator/prometheus"
                                target="_blank"
                                rel="noopener noreferrer"
                                className="external-link"
                            >
                                üìä Prometheus Metrics
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ServiceOne;