import React, { useState } from 'react';
import { kafkaApi, handleApiError } from '../services/api';
import './KafkaDemo.css';

interface Message {
    id: number;
    content: string;
    timestamp: Date;
    status: 'sending' | 'sent' | 'error';
    error?: string;
}

const KafkaDemo: React.FC = () => {
    const [message, setMessage] = useState<string>('');
    const [messages, setMessages] = useState<Message[]>([]);
    const [loading, setLoading] = useState<boolean>(false);

    const predefinedMessages = [
        '–ü—Ä–∏–≤–µ—Ç –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞! üëã',
        '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Kafka',
        '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π: ' + new Date().toLocaleString('ru-RU'),
        'JSON –¥–∞–Ω–Ω—ã–µ: {"user": "frontend", "action": "test"}',
        '–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ\n—Å–æ–æ–±—â–µ–Ω–∏–µ\n—Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫',
        '–≠–º–æ–¥–∑–∏ —Ç–µ—Å—Ç: üöÄ üéâ ‚úÖ ‚ùå üîî',
        '–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –≤ Kafka. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ —Å–ª–æ–≤ –∏ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ä—ë–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
    ];

    const sendMessage = async (messageContent: string) => {
        if (!messageContent.trim()) {
            return;
        }

        const newMessage: Message = {
            id: Date.now(),
            content: messageContent,
            timestamp: new Date(),
            status: 'sending',
        };

        setMessages(prev => [newMessage, ...prev]);
        setLoading(true);

        try {
            await kafkaApi.sendMessage(messageContent);
            setMessages(prev =>
                prev.map(msg =>
                    msg.id === newMessage.id
                        ? { ...msg, status: 'sent' as const }
                        : msg
                )
            );
        } catch (error) {
            const errorMessage = handleApiError(error);
            setMessages(prev =>
                prev.map(msg =>
                    msg.id === newMessage.id
                        ? { ...msg, status: 'error' as const, error: errorMessage }
                        : msg
                )
            );
        } finally {
            setLoading(false);
        }
    };

    const handleSendCustomMessage = () => {
        sendMessage(message);
        setMessage('');
    };

    const handleSendPredefined = (msg: string) => {
        sendMessage(msg);
    };

    const clearMessages = () => {
        setMessages([]);
    };

    const getStatusIcon = (status: Message['status']) => {
        switch (status) {
            case 'sending': return '‚è≥';
            case 'sent': return '‚úÖ';
            case 'error': return '‚ùå';
            default: return '‚ùì';
        }
    };

    const getStatusText = (status: Message['status']) => {
        switch (status) {
            case 'sending': return '–û—Ç–ø—Ä–∞–≤–∫–∞...';
            case 'sent': return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ';
            case 'error': return '–û—à–∏–±–∫–∞';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    };

    return (
        <div className="kafka-demo">
            <div className="kafka-header">
                <h1>üîÑ Kafka –î–µ–º–æ</h1>
                <p>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Apache Kafka —á–µ—Ä–µ–∑ Service One</p>
            </div>

            <div className="kafka-content">
                <div className="kafka-section">
                    <div className="section-card">
                        <h2>‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</h2>

                        <div className="message-input">
              <textarea
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å..."
                  rows={4}
                  disabled={loading}
              />
                            <button
                                onClick={handleSendCustomMessage}
                                disabled={loading || !message.trim()}
                                className="btn-primary"
                            >
                                {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'}
                            </button>
                        </div>
                    </div>
                </div>

                <div className="kafka-section">
                    <div className="section-card">
                        <h2>üìã –ë—ã—Å—Ç—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</h2>
                        <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:</p>

                        <div className="predefined-messages">
                            {predefinedMessages.map((msg, index) => (
                                <button
                                    key={index}
                                    onClick={() => handleSendPredefined(msg)}
                                    disabled={loading}
                                    className="predefined-message"
                                >
                                    {msg.length > 50 ? msg.substring(0, 50) + '...' : msg}
                                </button>
                            ))}
                        </div>
                    </div>
                </div>

                <div className="kafka-section">
                    <div className="section-card">
                        <div className="section-header">
                            <h2>üì§ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</h2>
                            <div className="header-actions">
                <span className="message-count">
                  –í—Å–µ–≥–æ: {messages.length}
                </span>
                                <button
                                    onClick={clearMessages}
                                    disabled={messages.length === 0}
                                    className="btn-secondary"
                                >
                                    üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                                </button>
                            </div>
                        </div>

                        <div className="messages-list">
                            {messages.length === 0 ? (
                                <div className="no-messages">
                                    <p>–°–æ–æ–±—â–µ–Ω–∏—è –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å</p>
                                    <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ ‚¨ÜÔ∏è</p>
                                </div>
                            ) : (
                                messages.map((msg) => (
                                    <div key={msg.id} className={`message-item ${msg.status}`}>
                                        <div className="message-header">
                      <span className="message-status">
                        {getStatusIcon(msg.status)} {getStatusText(msg.status)}
                      </span>
                                            <span className="message-time">
                        {msg.timestamp.toLocaleTimeString('ru-RU')}
                      </span>
                                        </div>

                                        <div className="message-content">
                                            {msg.content}
                                        </div>

                                        {msg.error && (
                                            <div className="message-error">
                                                –û—à–∏–±–∫–∞: {msg.error}
                                            </div>
                                        )}
                                    </div>
                                ))
                            )}
                        </div>
                    </div>
                </div>
            </div>

            <div className="kafka-info">
                <div className="info-grid">
                    <div className="info-card">
                        <h3>üîÑ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</h3>
                        <ol>
                            <li>–§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Service One</li>
                            <li>Service One –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫ Kafka</li>
                            <li>Service Two –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ</li>
                            <li>–õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ Service Two</li>
                        </ol>
                    </div>

                    <div className="info-card">
                        <h3>üéØ –¢–æ–ø–∏–∫ Kafka</h3>
                        <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> service-messages</p>
                        <p><strong>Consumer Group:</strong> service-two-group</p>
                        <p><strong>–§–æ—Ä–º–∞—Ç:</strong> String (text/plain)</p>
                    </div>

                    <div className="info-card">
                        <h3>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h3>
                        <p>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Kafka –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</p>
                        <a
                            href="http://localhost:8090"
                            target="_blank"
                            rel="noopener noreferrer"
                            className="external-link"
                        >
                            üîÑ Kafka UI
                        </a>
                    </div>

                    <div className="info-card">
                        <h3>üìù –õ–æ–≥–∏ Service Two</h3>
                        <p>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:</p>
                        <code>docker-compose logs -f service-two</code>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default KafkaDemo;