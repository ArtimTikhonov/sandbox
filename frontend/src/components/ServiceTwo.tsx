import React, { useState, useEffect } from 'react';
import { serviceTwoApi, handleApiError } from '../services/api';
import './ServiceTwo.css';

interface LogMessage {
    id: number;
    timestamp: string;
    message: string;
    type: 'info' | 'warning' | 'error';
}

const ServiceTwo: React.FC = () => {
    const [serviceStatus, setServiceStatus] = useState<'checking' | 'online' | 'offline'>('checking');
    const [lastCheck, setLastCheck] = useState<Date | null>(null);
    const [response, setResponse] = useState<string>('');
    const [logs, setLogs] = useState<LogMessage[]>([
        {
            id: 1,
            timestamp: new Date().toISOString(),
            message: 'Service Two –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka',
            type: 'info'
        }
    ]);

    const checkServiceStatus = async () => {
        try {
            setServiceStatus('checking');
            const result = await serviceTwoApi.test();
            setServiceStatus('online');
            setResponse(result.data);
            setLastCheck(new Date());

            addLog('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ø–µ—à–Ω–∞: ' + result.data, 'info');
        } catch (error) {
            setServiceStatus('offline');
            setResponse(handleApiError(error));
            setLastCheck(new Date());

            addLog('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ' + handleApiError(error), 'error');
        }
    };

    const addLog = (message: string, type: LogMessage['type'] = 'info') => {
        const newLog: LogMessage = {
            id: Date.now(),
            timestamp: new Date().toISOString(),
            message,
            type
        };

        setLogs(prev => [newLog, ...prev.slice(0, 49)]); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ª–æ–≥–æ–≤
    };

    const clearLogs = () => {
        setLogs([]);
    };

    const simulateKafkaMessage = () => {
        const messages = [
            '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Kafka: "Hello from Service One!"',
            '–û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Å–æ–æ–±—â–µ–Ω–∏—è: {"action": "test", "data": "sample"}',
            '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"',
            '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...',
            '–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏'
        ];

        const randomMessage = messages[Math.floor(Math.random() * messages.length)];
        addLog(randomMessage, 'info');
    };

    const getStatusIcon = () => {
        switch (serviceStatus) {
            case 'online': return 'üü¢';
            case 'offline': return 'üî¥';
            case 'checking': return 'üü°';
            default: return '‚ùì';
        }
    };

    const getStatusText = () => {
        switch (serviceStatus) {
            case 'online': return '–û–Ω–ª–∞–π–Ω';
            case 'offline': return '–û—Ñ—Ñ–ª–∞–π–Ω';
            case 'checking': return '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    };

    const getLogIcon = (type: LogMessage['type']) => {
        switch (type) {
            case 'info': return '‚ÑπÔ∏è';
            case 'warning': return '‚ö†Ô∏è';
            case 'error': return '‚ùå';
            default: return 'üìù';
        }
    };

    const formatTimestamp = (timestamp: string) => {
        return new Date(timestamp).toLocaleTimeString('ru-RU');
    };

    useEffect(() => {
        checkServiceStatus();

        // –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        const interval = setInterval(checkServiceStatus, 30000);

        // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka –∫–∞–∂–¥—ã–µ 10-30 —Å–µ–∫—É–Ω–¥
        const kafkaSimulation = setInterval(() => {
            if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å "—Å–æ–æ–±—â–µ–Ω–∏–µ"
                simulateKafkaMessage();
            }
        }, 15000);

        return () => {
            clearInterval(interval);
            clearInterval(kafkaSimulation);
        };
    }, []);

    return (
        <div className="service-two">
            <div className="service-header">
                <h1>üîß Service Two</h1>
                <p>–°–µ—Ä–≤–∏—Å-–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Apache Kafka</p>
            </div>

            <div className="service-content">
                {/* Service Status */}
                <div className="service-section">
                    <div className="section-card">
                        <div className="section-header">
                            <h2>üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞</h2>
                            <button
                                onClick={checkServiceStatus}
                                disabled={serviceStatus === 'checking'}
                                className="btn-secondary"
                            >
                                {serviceStatus === 'checking' ? '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
                            </button>
                        </div>

                        <div className="status-display">
                            <div className="status-main">
                                <span className="status-icon">{getStatusIcon()}</span>
                                <div className="status-info">
                  <span className="status-text">
                    –°—Ç–∞—Ç—É—Å: <strong>{getStatusText()}</strong>
                  </span>
                                    <span className="status-response">
                    –û—Ç–≤–µ—Ç: <code>{response || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</code>
                  </span>
                                    <span className="status-time">
                    –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {lastCheck ? formatTimestamp(lastCheck.toISOString()) : '–ù–∏–∫–æ–≥–¥–∞'}
                  </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Kafka Consumer Info */}
                <div className="service-section">
                    <div className="section-card">
                        <h2>üîÑ Kafka Consumer</h2>
                        <div className="kafka-info">
                            <div className="kafka-config">
                                <h4>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</h4>
                                <div className="config-item">
                                    <span className="config-label">–¢–æ–ø–∏–∫:</span>
                                    <span className="config-value">service-messages</span>
                                </div>
                                <div className="config-item">
                                    <span className="config-label">Consumer Group:</span>
                                    <span className="config-value">service-two-group</span>
                                </div>
                                <div className="config-item">
                                    <span className="config-label">Auto Offset Reset:</span>
                                    <span className="config-value">earliest</span>
                                </div>
                                <div className="config-item">
                                    <span className="config-label">Bootstrap Servers:</span>
                                    <span className="config-value">kafka:9092</span>
                                </div>
                            </div>

                            <div className="kafka-functionality">
                                <h4>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</h4>
                                <ul>
                                    <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka</li>
                                    <li>–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</li>
                                    <li>–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</li>
                                    <li>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è consumer group</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Logs */}
                <div className="service-section">
                    <div className="section-card">
                        <div className="section-header">
                            <h2>üìã –õ–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</h2>
                            <div className="header-actions">
                                <button
                                    onClick={simulateKafkaMessage}
                                    className="btn-secondary"
                                >
                                    üì• –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                                </button>
                                <button
                                    onClick={clearLogs}
                                    disabled={logs.length === 0}
                                    className="btn-secondary"
                                >
                                    üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
                                </button>
                            </div>
                        </div>

                        <div className="logs-container">
                            {logs.length === 0 ? (
                                <div className="no-logs">
                                    <p>–õ–æ–≥–∏ –ø—É—Å—Ç—ã</p>
                                    <p>–°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Kafka –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å</p>
                                </div>
                            ) : (
                                <div className="logs-list">
                                    {logs.map((log) => (
                                        <div key={log.id} className={`log-item ${log.type}`}>
                                            <div className="log-header">
                                                <span className="log-icon">{getLogIcon(log.type)}</span>
                                                <span className="log-time">{formatTimestamp(log.timestamp)}</span>
                                                <span className={`log-type ${log.type}`}>{log.type.toUpperCase()}</span>
                                            </div>
                                            <div className="log-message">{log.message}</div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                {/* API Information */}
                <div className="service-section">
                    <div className="section-card">
                        <h2>üîó API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã</h2>
                        <div className="api-endpoints">
                            <div className="endpoint">
                                <span className="method get">GET</span>
                                <span className="path">/two/get</span>
                                <span className="description">–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞</span>
                            </div>
                        </div>

                        <div className="api-note">
                            <p><strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> Service Two –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ Kafka consumer –∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ –≤–Ω–µ—à–Ω–∏—Ö API. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏.</p>
                        </div>
                    </div>
                </div>

                {/* Instructions */}
                <div className="service-section">
                    <div className="section-card">
                        <h2>üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</h2>
                        <div className="instructions">
                            <div className="instruction-step">
                                <h4>1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</h4>
                                <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É <strong>Kafka</strong> –∏–ª–∏ <strong>Service One</strong> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫.</p>
                            </div>

                            <div className="instruction-step">
                                <h4>2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏</h4>
                                <p>–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã Service Two –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤ –ª–æ–≥–∞—Ö –≤—ã—à–µ.</p>
                            </div>

                            <div className="instruction-step">
                                <h4>3. –ü—Ä–æ—Å–º–æ—Ç—Ä –≤ Kafka UI</h4>
                                <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <a href="http://localhost:8090" target="_blank" rel="noopener noreferrer">Kafka UI</a> –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–ø–∏–∫–æ–≤ –∏ consumer groups.</p>
                            </div>

                            <div className="instruction-step">
                                <h4>4. –õ–æ–≥–∏ Docker</h4>
                                <p>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>docker-compose logs -f service-two</code></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ServiceTwo;