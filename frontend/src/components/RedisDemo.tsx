import React, { useState, useEffect } from 'react';
import { redisApi, handleApiError } from '../services/api';
import './RedisDemo.css';

interface RedisKey {
    key: string;
    value?: string;
    ttl?: number;
}

const RedisDemo: React.FC = () => {
    const [keys, setKeys] = useState<string[]>([]);
    const [selectedKey, setSelectedKey] = useState<string>('');
    const [selectedValue, setSelectedValue] = useState<string>('');
    const [newKey, setNewKey] = useState<string>('');
    const [newValue, setNewValue] = useState<string>('');
    const [ttl, setTtl] = useState<number>(0);
    const [loading, setLoading] = useState<boolean>(false);
    const [message, setMessage] = useState<string>('');
    const [messageType, setMessageType] = useState<'success' | 'error'>('success');

    const showMessage = (text: string, type: 'success' | 'error' = 'success') => {
        setMessage(text);
        setMessageType(type);
        setTimeout(() => setMessage(''), 3000);
    };

    const loadKeys = async () => {
        try {
            setLoading(true);
            const response = await redisApi.getAllKeys();
            setKeys(response.data || []);
        } catch (error) {
            showMessage(handleApiError(error), 'error');
        } finally {
            setLoading(false);
        }
    };

    const loadValue = async (key: string) => {
        try {
            const response = await redisApi.getValue(key);
            setSelectedValue(response.data || '');
            setSelectedKey(key);
        } catch (error) {
            showMessage(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è: ${handleApiError(error)}`, 'error');
        }
    };

    const setValue = async () => {
        if (!newKey.trim()) {
            showMessage('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á', 'error');
            return;
        }

        try {
            setLoading(true);
            if (ttl > 0) {
                await redisApi.setValueWithTTL(newKey, newValue, ttl);
                showMessage(`–ö–ª—é—á "${newKey}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å TTL ${ttl} —Å–µ–∫—É–Ω–¥`);
            } else {
                await redisApi.setValue(newKey, newValue);
                showMessage(`–ö–ª—é—á "${newKey}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
            }

            setNewKey('');
            setNewValue('');
            setTtl(0);
            await loadKeys();
        } catch (error) {
            showMessage(handleApiError(error), 'error');
        } finally {
            setLoading(false);
        }
    };

    const deleteKey = async (key: string) => {
        try {
            setLoading(true);
            await redisApi.deleteKey(key);
            showMessage(`–ö–ª—é—á "${key}" —É–¥–∞–ª–µ–Ω`);
            await loadKeys();
            if (selectedKey === key) {
                setSelectedKey('');
                setSelectedValue('');
            }
        } catch (error) {
            showMessage(handleApiError(error), 'error');
        } finally {
            setLoading(false);
        }
    };

    const incrementKey = async (key: string, delta: number = 1) => {
        try {
            const response = await redisApi.increment(key, delta);
            showMessage(`–ö–ª—é—á "${key}" —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${delta}. –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${response.data}`);
            if (selectedKey === key) {
                setSelectedValue(response.data.toString());
            }
        } catch (error) {
            showMessage(handleApiError(error), 'error');
        }
    };

    const decrementKey = async (key: string, delta: number = 1) => {
        try {
            const response = await redisApi.decrement(key, delta);
            showMessage(`–ö–ª—é—á "${key}" —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ ${delta}. –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${response.data}`);
            if (selectedKey === key) {
                setSelectedValue(response.data.toString());
            }
        } catch (error) {
            showMessage(handleApiError(error), 'error');
        }
    };

    useEffect(() => {
        loadKeys();
    }, []);

    return (
        <div className="redis-demo">
            <div className="redis-header">
                <h1>üî¥ Redis –î–µ–º–æ</h1>
                <p>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–º Redis</p>
            </div>

            {message && (
                <div className={`message ${messageType}`}>
                    {message}
                </div>
            )}

            <div className="redis-content">
                <div className="redis-section">
                    <div className="section-card">
                        <h2>‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á</h2>
                        <div className="form-group">
                            <label>–ö–ª—é—á:</label>
                            <input
                                type="text"
                                value={newKey}
                                onChange={(e) => setNewKey(e.target.value)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á"
                                disabled={loading}
                            />
                        </div>

                        <div className="form-group">
                            <label>–ó–Ω–∞—á–µ–Ω–∏–µ:</label>
                            <input
                                type="text"
                                value={newValue}
                                onChange={(e) => setNewValue(e.target.value)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                                disabled={loading}
                            />
                        </div>

                        <div className="form-group">
                            <label>TTL (—Å–µ–∫—É–Ω–¥—ã, 0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è):</label>
                            <input
                                type="number"
                                value={ttl}
                                onChange={(e) => setTtl(Number(e.target.value))}
                                min="0"
                                disabled={loading}
                            />
                        </div>

                        <button
                            onClick={setValue}
                            disabled={loading || !newKey.trim()}
                            className="btn-primary"
                        >
                            {loading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á'}
                        </button>
                    </div>
                </div>

                <div className="redis-section">
                    <div className="section-card">
                        <div className="section-header">
                            <h2>üóÉÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏</h2>
                            <button
                                onClick={loadKeys}
                                disabled={loading}
                                className="btn-secondary"
                            >
                                üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                            </button>
                        </div>

                        <div className="keys-list">
                            {keys.length === 0 ? (
                                <p className="no-keys">–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                            ) : (
                                keys.map((key) => (
                                    <div
                                        key={key}
                                        className={`key-item ${selectedKey === key ? 'selected' : ''}`}
                                    >
                                        <div className="key-info" onClick={() => loadValue(key)}>
                                            <span className="key-name">{key}</span>
                                        </div>
                                        <div className="key-actions">
                                            <button
                                                onClick={() => incrementKey(key)}
                                                className="btn-small btn-success"
                                                title="–£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 1"
                                            >
                                                +1
                                            </button>
                                            <button
                                                onClick={() => decrementKey(key)}
                                                className="btn-small btn-warning"
                                                title="–£–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 1"
                                            >
                                                -1
                                            </button>
                                            <button
                                                onClick={() => deleteKey(key)}
                                                className="btn-small btn-danger"
                                                title="–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á"
                                            >
                                                üóëÔ∏è
                                            </button>
                                        </div>
                                    </div>
                                ))
                            )}
                        </div>
                    </div>
                </div>

                {selectedKey && (
                    <div className="redis-section">
                        <div className="section-card">
                            <h2>üìÑ –ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞: {selectedKey}</h2>
                            <div className="value-display">
                <textarea
                    value={selectedValue}
                    readOnly
                    rows={6}
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏—è"
                />
                            </div>
                            <div className="value-actions">
                                <button
                                    onClick={() => incrementKey(selectedKey, 5)}
                                    className="btn-secondary"
                                >
                                    +5
                                </button>
                                <button
                                    onClick={() => incrementKey(selectedKey, 10)}
                                    className="btn-secondary"
                                >
                                    +10
                                </button>
                                <button
                                    onClick={() => decrementKey(selectedKey, 5)}
                                    className="btn-secondary"
                                >
                                    -5
                                </button>
                                <button
                                    onClick={() => decrementKey(selectedKey, 10)}
                                    className="btn-secondary"
                                >
                                    -10
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </div>

            <div className="redis-info">
                <div className="info-card">
                    <h3>üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Redis API</h3>
                    <ul>
                        <li>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</li>
                        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ (TTL)</li>
                        <li>–ê—Ç–æ–º–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞/–¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∞</li>
                        <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ –∏ –∏—Ö —É–¥–∞–ª–µ–Ω–∏–µ</li>
                        <li>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π</li>
                    </ul>
                </div>
            </div>
        </div>
    );
};

export default RedisDemo;