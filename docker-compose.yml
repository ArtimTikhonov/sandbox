version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - sandbox-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"  # Добавляем дополнительный порт для внешних подключений
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - sandbox-network

  # Добавленный Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"  # Веб-интерфейс будет доступен на порту 8090
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      # Дополнительные настройки
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_READONLY: 'false'
    networks:
      - sandbox-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - sandbox-network

  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sandbox
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sandbox-network

  # Prometheus для сбора метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sandbox-network

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - sandbox-network
    depends_on:
      - prometheus

  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: api-gateway
      args:
        REBUILD_DATE: ${REBUILD_DATE:-$(date +%Y%m%d%H%M%S)}
    container_name: api-gateway
    ports:
      - "8000:8000"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED=false
    networks:
      - sandbox-network
    depends_on:
      - service-one
      - service-two
      - kafka

  service-one:
    build:
      context: .
      dockerfile: Dockerfile
      target: service-one
      args:
        REBUILD_DATE: ${REBUILD_DATE:-$(date +%Y%m%d%H%M%S)}
    container_name: service-one
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # PostgreSQL переменные
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=sandbox
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      # Redis переменные
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - sandbox-network
    depends_on:
      - kafka
      - postgres
      - redis

  service-two:
    build:
      context: .
      dockerfile: Dockerfile
      target: service-two
      args:
        REBUILD_DATE: ${REBUILD_DATE:-$(date +%Y%m%d%H%M%S)}
    container_name: service-two
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - sandbox-network
    depends_on:
      - service-one
      - kafka

networks:
  sandbox-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data: